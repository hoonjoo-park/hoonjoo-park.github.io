{"pages":[],"posts":[{"title":"Javascript는 어떻게 작동하는가?","text":"💡 사전 지식 Parse : 컴퓨터가 이해할 수 있도록 프로그래밍 언어가 데이터를 가공하고 읽기 위해 일정한 포맷으로 변환하는 것. (쉽게 말하면, 사람의 언어 구조 → 컴퓨터의 언어 구조로 변환되는 것이라 봐도 될 것 같다) Thread : 프로그램 내에서의 작업 또는 프로세스의 경로 자바스크립트 개요 JS는 컴파일이 필요 없는 Interpreter 언어이다. JS는 변수를 설정할 때 특정 문자열타입을 지정하지 않고 let과 const에 구분없이 담을 수 있다. (동적 타입) 이러한 타입 시스템의 부재로 정적타입 언어인 C, C++에 비해 자바스크립트는 효율성이 떨어지고 느리다. 그렇다면 이렇게 비효율적이고 느린 언어를 계속 사용하는가? 이를 이해하기 위해선, 자바스크립트의 역사에 대해 간략히 짚고 넘어가야 한다. JS의 역사 1990년대의 웹 브라우저들은 매우 정적이고 비상호적인 페이지들을 띄우는 역할만을 담당했었다. 하지만 이후 웹 브라우저에서의 상호작용성을 더하기 위해 1995년 Netscape의 브랜든 아이크(Brendan Eich)에 의해 10일만에 개발된 Javascript가 세상에 공개되었고, 이는 혁신을 일으켰다. 하지만 여러 경쟁사들이 이러한 동적이고 상호적인 브라우저 언어의 개발에 뛰어들었고, 브라우저마다 언어가 달랐기에 호환성 등의 문제가 발발했다. 이에 따라 ECMA Script라는 브라우저 언어에 대한 약속이자 문법을 담은 문서가 개발된 것이다. 그렇게 표준화 되어가는 것 처럼 보이던 ECMA Script에 의한 브라우저 언어의 안정성과 호환성은 마이크로소프트 사의 ECMA 참여 거부로 점점 불안정해지기 시작한다. 그러나, Jesse James라는 개발자가 AJAX를 제안했고, 2008년 생태계 교란종이라고 할 수 있는 강력한 Chrome의 등장으로 위기를 느낀 다른 브라우저들의 협력을 통해 ES5, ES6 등의 문서들이 이후 작성되었다. 드디어 JS는 성숙하고 안정된 언어로 자리잡을 수 있게 된 것이다. 이제 JS가 브라우저에서 어떻게 “실행(Implemented)”되어야 하는지는 ES에 의해 정의됐다.그렇다면 “어떻게” 작동되어야 하는지는 무엇이 결정하는가? ⇒ JS엔진에 대한 이해가 필요하다. 자바스크립트 엔진 모든 브라우저는 JS코드를 실행하기 위한 JS 엔진을 탑재하고 있다 (Netscape는 SpiderMonkey라는 엔진을, Chrome은 V8엔진을 사용한다). 가장 기초적인 엔진구조(SpiderMonkey)는 JS소스코드를 컴파일 하여 Bytecode로 만드는 baseline compiler → 그리고 이 Bytecode를 머신코드(Binary Code)로 변환하여 최종적으로 CPU에서 실행되게 하는 Interpreter가 존재한다. 하지만 이러한 기초적 엔진구조는 컴파일 시간의 단축에만 집중할 뿐, 코드의 최적화에는 목적을 두지 않는다. 따라서 위와 같은 기초적 엔진구조는 아주 동적이고 인터렉티브한 웹 어플리케이션을 구동하는데 무리가 있다. 이러한 문제점들을 해결하기 위해 구글(Google)은 V8엔진을 사용한다. V8은 Baseline Compiler로써 Full-Codegen을 사용하고, 최적화를 위한 Crankshaft를 사용한다. 기존과 같이 Full-Codegen은 최적화를 신경쓰지 않고 최대한 빨리 Binary Code를 반환한다. 하지만 이러한 과정 중에 소스코드의 최적화를 진행해 최적화된 코드를 Full-Codegen이 반환한 코드의 일부와 대체한다. 즉, 빠른 컴파일과 최적화를 행한다는 것이다. 어떻게 작동되는지에 대한 프로세스는 이제 알겠다. 그렇다면 그 “최적화”라는 것은 어떻게 이루어지는가? 자바스크립트의 최적화 위에서 설명했듯, JS는 타입 시스템이 없고, 더 나아가 프로파일링 데이터(Profiling Data)를 수집하며 느리게 실행되는 코드를 감별하느라 CPU에 부담을 준다. 이에 따라 2017년에 새로 개발된 것이 새로운 V8엔진이다. 새로운 버전의 V8 엔진에는 Ignition이라는 파이프라인이 추가됐다. 이는 **베이스라인의 기능( JS 소스코드 → 바이트 코드로 변환) + 인터프리터의 기능(바이너리 코드로의 변환)**이 이루어지는 파이프라인이다. 그리고 Turbo Fan은 Ignition으로 부터 프로파일링 데이터를 넘겨받아 Hot코드 (CPU에 부담을 주는 코드)를 최적화 할 지, 말 지를 결정한다. 런타임에서의 JS 자바스크립트는 single-threaded 언어다. 즉, 자바스크립트는 코드가 실행될 때 모든 코드가 한 덩어리로써 한번에 실행된다는 것이다. 이러한 싱글 스레드 방식의 문제점은, 실행시간이 오래걸리는 코드가 중간에 껴있으면, 그 후의 코드 실행에 악영향을 미친다는 것이다. 따라서 이러한 블락(또는 무한루프) 문제점이 발생하면 브라우저의 모든 기능들은 중단된다는 문제점을 갖는다. 하지만 다행히도, 이제는 대부분의 브라우저들이 멀티탭 기능들을 탑재하고 있기에, 브라우저별 스레드가 아닌 탭(Tab)별 스레드가 적용되기 때문에 하나의 탭에만 싱글 스레드 문제점이 적용된다. 이렇듯 자바스크립트는 싱글 스레디드 언어이기 때문에 하나의 힙 메모리와 하나의 스택을 갖는다. 스택에서의 코드 실행 방식과 pop 방식은 아래와 같이 LIFO(후입선출)를 따른다. 이와 같은 싱글 스레드 방식만을 따르면, 브라우저는 HTTP 요청을 보내거나 받는 동안 다른 모든 핵심 기능들을 (캐싱, 데이터베이스 스토리지, DOM 이벤트 리스닝 등등) 사용하지 못할 것이다. 이를 해결하기 위해 자바스크립트만의 스레드는 독립적으로 두되, 브라우저 자체 내에서 다른 스레드를 구성하여 DOM 이벤트 리스닝, 캐싱, 데이터베이스 스토리지 등을 자바스크립트와는 독립적으로 기능할 수 있도록 하는 것이다. 이러한 독립적 스레드를 사용하는 브라우저 기능 중에는 Web API 요청을 위한 fetch() 가 있다. 이 fetch()는 자바스크립트 엔진 내의 스레드를 사용하지 않기 때문에 비동기적으로 작동하고, 이러한 비동기 방식 때문에 우리는 fetch()를 사용할 때 콜백함수를 사용하고, async await과 같은 비동기 처리 방식들을 사용하는 것이다. 1234567891011121314151617function printHello() { console.log('Hello from baz');}function three() { setTimeout(printHello, 3000);}function two() { three();}function one() { two();}one(); Event Loop : 콜스택과 콜백 큐를 주시하며, 콜스택이 비어있고, 콜백 큐에 처리해야 할 스택이 존재한다면 해당 스택을 콜스택으로 옮겨 쌓아 올리는 역할을 한다. 이와 비슷하게 setTimeout() 또한, 콜스택과 메시지큐, 이벤트루프에 의한 독립적 스레드에 의해 효율적으로 작동된다. 먼저 위의 코드를 보면 one() → two() → three() 순으로 코드가 실행될 것이다. 하지만 three()의 setTimeout()내의 콜백함수인 printHello()는 자바스크립트에 의해 webAPI로 보내질 것이고 자바스크립트 엔진 자체에서 3초를 기다리는 것이 아닌, 자바스크립트 자체는 이후 바로 다음 라인의 코드로 넘어간다. 하지만 다음 라인의 코드가 없기에 자바스크립트는 콜스택에서 three two one을 순서대로 pop할 것이다. 하지만 3초 뒤 콜백함수(printHello)는 webAPI에 의해 메시지큐에 담길 것이고, 이벤트루프가 이 콜백함수를 다시 콜스택 위에 올릴 것이다. 그렇게 setTimeout과 그 안의 콜백함수가 실행되는 것이다.","link":"/javascript/base/javascript-howItWorks/"},{"title":"콜백과 프로미스 (Callback &amp; Promise)","text":"콜백 함수 (Callback Function) 비동기 처리 방식의 문제점을 해결하기 위해, 특정 로직 수행이 완료됐을 때 원하는 동작을 실행시킬 수 있도록 하는 함수! 레스토랑 예약을 예시로 들 수 있다. 우리는 레스토랑 예약을 통해 우리가 원하는 시간대에 웨이팅 없이 식사를 편하게 즐길 수 있고, 웨이팅을 하는 대신 그 시간을 자유롭게 활용할 수 있다. 즉, 예약한 시간대**(로직 수행이 완료됐을 때)에 우리는 식당에 가서 먹기로 했던 메뉴를 시켜먹으면 되는 것이다(동작)**. 😈 콜백 지옥 우리는 가끔, 비동기 처리를 위해 콜백함수를 중첩하여 사용하는 경우를 맞이하는데…이를 콜백 지옥(Callback Hell)이라고 부른다.이렇게 콜백 함수가 꼬리에 꼬리를 무는 형식은 가독성도 떨어지고 변경 및 유지보수가 어렵다. ⇒ 이러한 콜백 지옥 문제를 해결하기 위해 필요한 것이 Promise와 Async다. 🤙 프로미스란? “A promise is an object that may produce a single value some time in the future” =&gt; 자바스크립트 비동기 처리에 사용되는 객체로, 미래에 특정한 value를 생성해낸다.“미래에 하나의 value를 생성해낼 것이라는 약속!” 콜백 함수와 프로미스의 차이점? 콜백 함수와 프로미스 모두 비동기적 처리 방식의 문제점을 해결하기 위한 함수라는 점에서는 동일하다.하지만 Promise는 이러한 콜백함수들이 한 객체로써 뭉쳐서 중첩되어있지 않고분리된 객체로써 논리적으로 상호 연결될 수 있도록 하는 하나의 절차적 함수라고 보면 된다. 프로미스의 구조 new Promise() resolve() then() 프로미스의 상태(state) Pending(대기) : 비동기처리 로직이 아직 미완료된 상태 123new Promise(function (resolve, reject) { // ...}); Fullfilled(이행) : 비동기 처리가 완료 → 프로미스가 결과값을 반환 123456789101112//resolve가 됐고, 이제 then을 활용해 처리 결과값을 받을 수 있다.function getData() { return new Promise(function (resolve, reject) { const data = 100; resolve(data); });}// resolve()의 결과 값 data를 resolvedData로 받음getData().then(function (resolvedData) { console.log(resolvedData); // 100}); Rejected(실패) : 비동기 처리의 오류/실패 12345678910111213//이렇게 리젝트에 대한 결과값(실패 이유)을 아래의 catch()를 통해 받을 수 있다.function getData() { return new Promise(function (resolve, reject) { reject(new Error('Request is failed')); });}// reject()의 결과 값 Error를 err에 받음getData() .then() .catch(function (err) { console.log(err); // Error: Request is failed }); Iterator &amp; Iterable *이터레이터 : 반복자이터러블 : 반복 가능한* 자바스크립트에서는 “반복 가능한(Iterable)” 요소들만 순회 또는 반복될 수 있다. ex) 배열 이터레이터는 next, done, value의 구성을 갖는다!done : 이터레이터가 아직 루프중인지 확인value : 루프중일 때 해당하는 값을 반환 이터레이터와 배열의 차이? 이터레이터는 next 메서드만 기능할 수 있기 때문에, 배열의 기능적 부분집합이라고 볼 수 있다. 하지만… 일반적으로 배열이 이터레이터보다 무겁고 배열이 이터레이터보다 메모리 효율성이 떨어진다. 이터레이터는 다음 값 호출을 받았을 때, 그 때 필요한 값만 계산하는 것이 가능하기 때문이다. (next) 제너레이터 (Generator) 이터레이터를 사용할 수 있도록 해주는 함수 == 제너레이터이터레이터 + 이터러블의 조합 == 제너레이터 기본 문법 1234567function* gen() { yield 1; yield 2; yield 3;}var g = gen(); // &quot;Generator { }&quot; 사용 예시 (무한 반복자) 1234567891011function* idMaker() { var index = 0; while (true) yield index++;}var gen = idMaker(); // &quot;Generator { }&quot;console.log(gen.next().value); // 0console.log(gen.next().value); // 1console.log(gen.next().value); // 2// ...","link":"/javascript/base/%EC%BD%9C%EB%B0%B1%EA%B3%BC%20%ED%94%84%EB%A1%9C%EB%AF%B8%EC%8A%A4%20(Callback%20&%20Promise)/"},{"title":"[Wesbos] Drum Kit","text":"키보드를 누르면 해당 키값에 맞는 드럼 사운드가 재생되는 간단한 웹페이지다.우선, 각 키를 눌렀을 때 기능해야하는 것들 + 웹페이지 작동 원리와 로직은 이하와 같다! 로직 키보드를 눌렀을 때? 해당 키값 찾기 (keyCode) 해당 오디오 태그 값 찾아서 play 연타 가능하도록 Currenttime = 0으로 설정 css 적용 (.playing 삽입) 적용된 css 제거하며 역트랜지션 구현 가능하도록 구현 코딩 과정1. 해당 키값 찾기 (keyCode) 각 키보드에는 고유한 키값이 존재한다.http://keycode.info/ 이곳에 들어가 각 키값(keyCode)들을 알아보자. html파일에서 key블록을 구성하고 있는 div에 data-key = “nn”형식으로 키값을 부여한다. 123&lt;div data-key=&quot;65&quot; class=&quot;key&quot;&gt; &lt;kbd&gt;A&lt;kbd&gt;&lt;/div&gt; 참고로 본인은 기존에 설정 되어있던 [a-s-d-f-g-h-j-k-l] 배열이 불편하다 생각이 들어 오투잼 배열로 키보드 배열을 변경했음. (div와 audio 태그 내의 data-key만 변경해주면 쉽게 변경 가능!) 완료했다면, JS파일로 돌아가 keys라는 변수를 querySelectorAll을 통해 지정해준다. 1const keys = document.querySelectorAll('.key'); 이제 키보드를 눌렀다는 event를 컴퓨터가 감지할 수 있도록 addEventListener를 통해 keydown 이벤트에 반응하는 함수를 만들어준다. 1window.addEventListener('keydown', keydown); forEach 💡 배열에 사용되는 함수! 편리하게도 배열의 각 요소에 대한 callback 함수를 적용할 수 있음 123456//예시const array1 = ['가', '나', '다'];array1.forEach((element) =&gt; console.log(element));// 예상 아웃풋: &quot;가&quot;// 예상 아웃풋: &quot;나&quot;// 예상 아웃풋: &quot;다&quot; 이제 위에서 설정한 keydown 이벤트를 들을 수 있는 keydown함수를 작성해준다. 그리고 console.log를 통해 누른 키에 해당하는 keyCode값을 콘솔 창에 찍어보자. 123function keydown(e) { console.log(e.keyCode);} 2. 키 값을 활용해 audio를 play audio에 입력된 data-key와 입력된 키의 keyCode가 상호 연결되어,입력된 키에 해당하는 audio만 재생이 돼야 한다. ⇒ 따라서, audio를 따로 변수처리 해서 해당 오디오 파일을 재생시켜줘야 함 12345678const audio = document.querySelector(`audio[data-key=&quot;${e.keyCode}&quot;]`);// 이렇게 e.keyCode를 변수화 하여 audio에 대입시키면 audio는 특정 audio,// 즉 눌러진 키에 해당하는 사운드만 플레이 될 수 있도록 지정할 수 있는 것!audio.play();//이제 play함수를 적용시키면 눌려진 키 값에 해당하는 사운드만 재생되는 것을 확인 할 수 있다. 3. currentTime을 활용한 연타 기능 추가 But… 키값에 맞는 오디오가 잘 플레이 되기는 하지만, 키를 연속적으로 눌러도 한 사운드의 재생이 끝날 때 까지 다음 키의 재생이 이루어지지 않는 것을 확인할 수 있다. ⇒ 따라서 currentTime을 활용해 키가 연속적으로 눌렸을 때 이에 즉각적으로 play() 함수가 반응되도록 해보자. 123456function keydown(e) { console.log(e.keycode); //이제는 필요 없는 코드 const audio = document.querySelector(`audio[data-key=&quot;${e.keyCode}&quot;]`); audio.currentTime = 0; audio.play();} currentTime currentTime은 HTML 내의 태그를 제어하기 위한 메소드다. currentTime = n; 을 통해 특정 수를 부여하면 audio는 해당 숫자에 해당되는 초로 이동한다.이에 따라, 위에서와 같이 currentTime=0; 을 사용하게 되면어떤 키가 눌렸을 때 해당 audio의 현재 플레이 위치는 0이 되는 것이다.즉, “재생이 정지된 것과 같은 효과 ⇒ 그에 따른 연타 가능”의 기능이 적용될 수 있는 것! 4. CSS 적용! 이제 CSS 적용만 하면 된다 :)audio에서 적용했던 논리와 동일하게 내가 누른 키에 해당하는 에만 css가 적용되도록 하면 됨! 123const key = document.querySelector(`.key[data-key=&quot;${e.keyCode}&quot;]`);key.classList.add('playing'); //미리 작성해둔 css 클래스를 적용 하지만…. 위의 코드만으론 css가 “적용”되기만 할 뿐, 키보드를 떼었을 때 css가 제거되지는 않는다. 5. 역트랜지션 구현 위의 키보드 div들의 .playing CSS의 적용과 트랜지션이 끝났을 때 곧바로 CSS가 제거되도록 코드를 짜주면 된다. 123456keys.forEach((key) =&gt; key.addEventListener('transitionend', transitionRemove));function transitionRemove(e) { if (e.propertyName !== 'transform') return; this.classList.remove('playing'); //transition이 끝난 div들의 playing css는 모두 제거된다.} 이제 모든 필요 기능들에 필요한 코드를 다 짰다. 아래는 그에 따른 최종 완성 코드다 :) 최종 완성 코드12345678910111213141516171819function playsound(e) { const key = document.querySelector(`.key[data-key = &quot;${e.keyCode}&quot;]`); const audio = document.querySelector(`audio[data-key = &quot;${e.keyCode}&quot;]`); if (!audio) return; //반드시 필요한 것은 아니지만, audio의 data-key에 해당하지 않는 키값이 입력됐을 때 함수가 종료되도록 //위와 같은 코드를 추가했음! audio.currentTime = 0; audio.play(); key.classList.add('playing');}function removeTransition(e) { if (e.propertyName !== 'transform') return; this.classList.remove('playing');}const keys = document.querySelectorAll('.key');keys.forEach((key) =&gt; key.addEventListener('transitionend', removeTransition));window.addEventListener('keydown', playsound);","link":"/javascript/wesbos/01.%20Drum%20Kit%20/"},{"title":"[Wesbos] Clock","text":"CSS와 JS를 이용해 아날로그 시계를 구현해보는 챕터다.시침 분침 초침이 시간에 따라 움직이도록 하려면 어떻게 해야할까? 로직시간이 변할 때 시간이 지날 때마다 침들의 deg에 변화를 준다. (rotate) = 1초, 1분, 1시간을 기준으로! = 각도는 360도를 기준으로! 침이 움직일 때 (CSS) = transition 효과를 줘서 실제 시계 침의 움직임과 유사하도록 구현 (째깍째깍의 느낌) 코딩 과정1. 초침, 분침, 시침을 지정해주자123const hoursHand = document.querySelector('.hour-hand');const minutesHand = document.querySelector('.min-hand');const secondsHand = document.querySelector('.second-hand'); 그렇다면….. 시간의 흐름을 어떻게 get하고 표현해야할까? 2. 현재 시, 분, 초를 불러오기현재 시,분,초에 따라 침들의 각도가 달라져야 하기 때문에, 시분초를 불러오는게 가장 먼저 해야 할 일 ! Date(), getHours(), getMinutes(), getSeconds() 👉 new Date()를 통해 현재 년월일 시분초를 불러올 수 있다. 이후, Date 내에서 getOOO을 통해 시 분 초를 골라서 사용할 수 있음 ! 123456function setDate() { const now = new Date(); const hours = now.getHours(); const minutes = now.getMinutes(); const seconds = now.getSeconds();} 3. 현재 시, 분, 초에 따른 침들의 각도 지정하기! 👉 transform = rotate(OOdeg); 를 활용 ! 123456const secondsDegrees = (seconds / 60) * 360 + 90;secondsHand.style.transform = `rotate(${secondsDegrees}deg)`;const hoursDegrees = (hours / 12) * 360 + (minutes / 60) * 30 + 90;hoursHand.style.transform = `rotate(${hoursDegrees}deg)`;const minutesDegrees = (minutes / 60) * 360 + (seconds / 60) * 6 + 90;minutesHand.style.transform = `rotate(${minutesDegrees}deg)`; 4. setInterval을 활용한 함수의 주기적 실행 👉 현재 시간에 따라 침이 변화해야 하는데 setInterval( ) 을 추가하지 않을 시 위의 setDate( ) 함수는 한번밖에 실행되지 않아 시계가 멈춰있게 된다. setInterval() 👉 일정한 시간 간격을 기준으로 특정 코드블록을 반복 실행할 수 있도록 하는 함수 setInterval(실행할 함수 이름, 시간 간격 기준) 단, 시간 간격은 ms가 기본 단위이다 (1000에 1초) 12setInterval(setDate, 1000);//1초에 한번씩 setDate함수를 실행하겠다는 뜻 최종 완성 코드123456789101112131415161718const hoursHand = document.querySelector('.hour-hand');const minutesHand = document.querySelector('.min-hand');const secondsHand = document.querySelector('.second-hand');function setDate() { const now = new Date(); const hours = now.getHours(); const minutes = now.getMinutes(); const seconds = now.getSeconds(); const secondsDegrees = (seconds / 60) * 360 + 90; secondsHand.style.transform = `rotate(${secondsDegrees}deg)`; const hoursDegrees = (hours / 12) * 360 + (minutes / 60) * 30 + 90; hoursHand.style.transform = `rotate(${hoursDegrees}deg)`; const minutesDegrees = (minutes / 60) * 360 + (seconds / 60) * 6 + 90; minutesHand.style.transform = `rotate(${minutesDegrees}deg)`;}setInterval(setDate, 1000);","link":"/javascript/wesbos/02.%20Clock/"},{"title":"[Wesbos] Array Cardio_1","text":"✅ 모든 언어에서 필수적으로 다뤄야 하는,그리고 굉장히 중요한 영역인 배열을 다루는 챕터였다. 기본 사항 이번 챕터에서 다룬 주요 배열 함수들은 순서대로filter(), map(), sort(), reduce()다. Javascript에서 배열 = [] 객체={}로 표현한다.객체는 {key : value}가 기본 형태 🙂 console.log 외에도 console.table(), console.dir() 등을 활용해볼 수도 있다. table()은 표 형태로 콘솔창에 출력되고,dir()은 해당 객체의 property들이 출력된다. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// 주어진 배열const inventors = [ { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 }, { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 }, { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 }, { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 }, { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 }, { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 }, { first: 'Max', last: 'Planck', year: 1858, passed: 1947 }, { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 }, { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 }, { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 }, { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 }, { first: 'Hanna', last: 'Hammarström', year: 1829, passed: 1909 },];const people = [ 'Bernhard, Sandra', 'Bethea, Erin', 'Becker, Carl', 'Bentsen, Lloyd', 'Beckett, Samuel', 'Blake, William', 'Berger, Ric', 'Beddoes, Mick', 'Beethoven, Ludwig', 'Belloc, Hilaire', 'Begin, Menachem', 'Bellow, Saul', 'Benchley, Robert', 'Blair, Robert', 'Benenson, Peter', 'Benjamin, Walter', 'Berlin, Irving', 'Benn, Tony', 'Benson, Leana', 'Bent, Silas', 'Berle, Milton', 'Berry, Halle', 'Biko, Steve', 'Beck, Glenn', 'Bergman, Ingmar', 'Black, Elk', 'Berio, Luciano', 'Berne, Eric', 'Berra, Yogi', 'Berry, Wendell', 'Bevan, Aneurin', 'Ben-Gurion, David', 'Bevel, Ken', 'Biden, Joseph', 'Bennington, Chester', 'Bierce, Ambrose', 'Billings, Josh', 'Birrell, Augustine', 'Blair, Tony', 'Beecher, Henry', 'Biondo, Frank',]; filter() 🔥 array.filter()를 통해 기존 배열을 조건에 맞게 새로운 배열로 반환할 수 있다. 실행결과123//filter를 활용하여 inventors 배열 내에서 &quot;1500년도에 태어난 inventor만&quot;을 새 배열로 추출해보시오.const fifteen = inventors.filter(inventor =&gt; (inventor.year &gt;= 1500 &amp;&amp; inventor.year =&lt; 1599));console.table(fifteen); map() 🔥 array.map()를 통해 배열 내의 데이터를 **”콜백함수”**에 맞게 새로운 배열로 반환! filter와 map의 차이점? filter는 조건!map은 콜백(CallBack)함수! ⇒ 이처럼, filter는 콜백함수에 반응하지 앉고 map()만 콜백함수가 조건으로써 적용될 수 있다.쉽게 생각하면, filter()는 if가 사용되는 배열함수라고 생각하면 될 것 같다. 실행결과123456//map() 함수를 사용해서 invertor들의 성과 이름을 통해 Full Name이 담긴 새 배열을 만들어보시오.const fullNames = inventors.map( (inventor) =&gt; `${inventors.first} ${inventors.last}`);console.table(fullNames); sort() sort()의 기본형은 글자순으로 자동정렬 or 숫자(앞자리 기준) 기준으로 자동정렬이다. 하지만, 우리가 이번 챕터에서 사용하는 sort()함수는 Compare Function. 즉, 비교 함수로써의 sort()다. Compare Function으로써의 sort() 🔥 array.sort(a,b)를 통해 a와 b를 비교해 “오름차순 또는 내림차순” 정렬 방식을 정하여 반환 123array.sort((a, b) =&gt; (a.value &gt; b.value ? 1 : -1));// 즉, a값이 b보다 크면 아래로 내리고, 그 반대라면 작은 것을 위로 올리겠다는 뜻 !// 0 또한 지정해줄 수 있는데, 이는 a와 b가 같은 값일 때를 의미한다. 실행결과123456// sort()를 활용하여 inventors를 나이에 대한 내림차순으로 정렬해보시오.const orderByBirth = inventors.sort((a, b) =&gt; (a.year &gt; b.year ? 1 : -1));// True라면 1이 부여되어 비교대상보다 위로 올라간다. (모든항 비교해 점수매기기라고 생각해도 될듯)console.table(orderByBirth); reduce() 🔥 array.reduce(리듀서 함수, 현재값) ⇒ 리듀서 함수를 실행하여 하나의 결과값을 반환한다. 1234array.reduce((total, currentValue) =&gt; { return total + currentValue;}, 0);// total의 초기값은 0, 이후 currentValue에 부여한 수식이 루프되어 총합이 계산된다. 실행결과1234567// reduce()를 활용하여 inventors의 나이를 모두 합한 결과값을 반환하시오.const sumOld = inventors.reduce((sum, inventor) =&gt; { return sum + (inventor.passed - inventor.year);}, 0);//여기서 0은 initialValue를 의미하는데, 가장 처음 루프 때 sum의 값이라고 생각하면 된다.","link":"/javascript/wesbos/04.%20Array%20Cardio1%20/"},{"title":"[Wesbos] Flex Box","text":"box-sizing 🔥 박스 크기의 기준을 어떤 것으로 설정할 것인가? content-box : 오로지 콘텐트 요소만 포함 (기본값) border-box : 콘텐트 + 보더 + 패딩 값을 모두 포함 inherit : 부모 요소로부터 상속 12345// 대부분의 개발자들은 border-box를 기본값으로 설정해두고 코딩을 함*{ box-sizing : border-box;}; justify-content와 align-items 🌸flex-basis와 flex-grow flex-basis = flex item의 기본 크기를 설정함 ! (direction이 row면 너비, column이면 높이) flex-grow = item이 basis값보다 커질 수 있는지 설정! (기본값은 0, 유연하게 늘어날 수 있도록 설정은 1) 123456// 비율 놀이라고 생각해도 편함 !.item:nth-child(1) { flex-grow: 1;}.item:nth-child(2) { flex-grow: 2;}.item:nth-child(3) { flex-grow: 1;}// 이럴 경우 1: 2: 1 비율로 컨테이너 안에서 크기가 형성됨 축약 속성 🔥 flex : grow, shrink, basis; Flex-container와 Flex-items? 🔥 Container는 아이템을 담는 박스라고 생각하면 되고,item은 개별 객체들이라고 보면 됨 ! // container에 display=flex를 주고, items에는 items에 쓸 수 있는 기능들이 따로 있음 flex-basis 🔥 flex를 적용할 경우, item들은 컨텐츠에 맞게 넓이가 설정되는데 basis값을 줄 경우 기본 넓이값이 설정된다. 만약 flex-basis를 100px로 줬는데 아이템 안에 컨텐츠가 100px보다 크다면 컨텐츠 값에 맞게 늘어난다. 즉, 컨텐츠 길이가 basis값보다 작으면 아이템은 basis에 맞춰서 크기가 설정됨 ! flex-grow (유연하게 늘리기) 🔥 flex-basis가 갖는 영역을 제외한 여백의 비율을 지정.기본값 = 0 flex-shrink (유연하게 줄이기) 🔥 flex-basis보다 크기가 줄어들 수 있는가 ?기본값 : 1 만약, 0으로 값을 설정하면 고정값으로 설정돼 basis의 크기가 고정값으로 지정된다.** 최종 완성 코드12345678const panels = document.querySelectorAll('.panel');function clicked() { this.classList.toggle('open'); this.classList.toggle('open-active');}panels.forEach((div) =&gt; div.addEventListener('click', clicked));","link":"/javascript/wesbos/05.%20Flex%20Box/"},{"title":"[Wesbos] Variable CSS","text":"로직 스크롤 → 해당 라벨의 이동값 선택 → 해당 값이 css variable에 적용 → 뒤에 suffix값 붙여넣기 CSS의 변수화 👉 CSS에서의 Variable control은 이하와 같이 표현 12345:root { --속성 : 값};//:root는 최상위 엘리먼트를 의미한다. (HTML) setProperty() 👉 설정, 2개의 인자 (속성,값) 1document.documentElement.style.setProperty(속성, 값); documentElement 👉 html 안의 모든 요소를 말한다 최종 코드 123456789101112const inputs = document.querySelectorAll('.controls input');function handleUpdate() { const suffix = this.dataset.sizing || ''; document.documentElement.style.setProperty( `--${this.name}`, this.value + suffix );}inputs.forEach((input) =&gt; input.addEventListener('change', handleUpdate));inputs.forEach((input) =&gt; input.addEventListener('mousemove', handleUpdate)); 1font-family: 'helvetica neue', sans-serif;","link":"/javascript/wesbos/03.%20Variable%20CSS/"},{"title":"[Wesbos] Type Ahead (동적 검색)","text":"💡 앞으로 개발을 하다보면 자주 사용하게 될 것 같은 동적 검색창이다.사실 Wes Bos 30일 챌린지를 진행하면서 근 6회차 중에 가장 어려운 챕터였던 것 같다…. 로직 json파일 불러오기 json파일을 새로운 배열 형태로 생성 (fetch) 검색어 찾기 기능 (“찾기”) 검색어에 해당하는 cities 나타내기(display) 1. json파일 불러오기 💡 json 주소 주소에 저장돼있는 json 형식의 city 파일 1234//이 json 파일 주소를 const를 통해 endpoint라는 값으로 지정!const endpoint = 'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json'; ❓ 하지만, 여기까지는 아직 주소값만 지정해준 것이기 때문에,이 json파일을 배열로써 나타나게 해줘야 한다. 12// 우선 cities라는 빈 배열을 만들어주자const cities = []; ⭐ 그렇다면, 이제 어떻게 저 주소로부터 city 값들을 불러들여올 수 있을까? =&gt; fetch API를 사용하면 된다 ! fetch API💡 fetch는 서버에 네트워크 요청을 할 수 있도록 도와주는 AJAX기반의 API다. 💡 fetch(접근하고자 하는 url, 옵션)then.() == 호출에 성공했을 때 응답객체를 resolve 즉, then은 fetch에 대한 응답형태 및 방식이라고 보면 된다. 123456//우선, 나는 json 주소를 endpoint로 지정해뒀으니까 주소 대신 변수명을 넣어준다.fetch(endpoint) //Blob은 타입이 존재하는 바이너리 객체! .then((Blob) =&gt; Blob.json()) //이제 이 json 데이터를 위에서 생성한 cities 배열에 push 해주면 기본적인 세팅은 끝! .then((data) =&gt; cities.push(...data)); fetch(endpoint)를 통해 Promise가 resolve됐음 Blob형태의 json 값들이 배열로 반환됨 검색을 통해 해당하는 city 찾기! ❓ 일단 findMatches라는 함수를 생성할건데,filter 조건 내에서 검색창에 입력될 글자는 매번 다를 것이므로 이를 어떻게 변수화 할지가 관건이다.이것을 해결해줄 기능이 바로 “**RegEXP와 match()”**다. RegExp 🔥 정규표현식 = 문자검색, 문자 대체, 문자추출에 주로 사용 new RegExp(표현식, 플래그) match() 🔥 정규표현식에 맞는 문자열을 찾아서 배열 객체**(문자열 형태)**로 반환한다. 12345678function findMatches(wordToMatch, cities) { return cities.filter((place) =&gt; { // 모든 문자와 여러줄을 영어 대소문자를 구분하지 않고 받아들임 const regex = new RegExp(wordToMatch, 'gi'); // &quot;||&quot;은 or을 뜻한다는 점 복기! return place.city.match(regex) || place.state.match(regex); });} 검색어에 해당하는 city or state 나타내기 💡 우선, 검색창과 검색결과가 보여질 html 요소를 정의해주고,addEventListener를 통해 변화에 따른 함수 실행을 설정하자 1234567// html 요소 정의const searchInput = document.querySelector('.search');const suggestions = document.querySelector('.suggestions');// addEventListener 사용searchInput.addEventListener('change', displayMatches);searchInput.addEventListener('keyup', displayMatches); displayMatches12345678910111213141516171819202122232425function displayMatches() { // 검색창에 입력된 글을 변수화! const matchArray = findMatches(this.value, cities); const html = matchArray .map((place) =&gt; { // 각 값들에 대한 정의 const regex = new RegExp(this.value, 'gi'); const cityName = place.city.replace( regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;` ); const stateName = place.state.replace( regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;` ); return ` &lt;li&gt; &lt;span class=&quot;name&quot;&gt;${cityName}, ${stateName}&lt;/span&gt; &lt;span class=&quot;population&quot;&gt;${place.population}&lt;/span&gt; &lt;/li&gt; `; }) .join(''); return (suggestions.innerHTML = html);} 최종 완성 코드1234567891011121314151617181920212223242526272829303132333435363738394041424344454647const endpoint = 'https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json';console.log(endpoint);const cities = [];fetch(endpoint) .then((Blob) =&gt; Blob.json()) .then((data) =&gt; cities.push(...data));function findMatches(wordToMatch, cities) { return cities.filter((place) =&gt; { const regex = new RegExp(wordToMatch, 'gi'); return place.city.match(regex) || place.state.match(regex); });}function displayMatches() { const matchArray = findMatches(this.value, cities); const html = matchArray .map((place) =&gt; { const regex = new RegExp(this.value, 'gi'); const cityName = place.city.replace( regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;` ); const stateName = place.state.replace( regex, `&lt;span class=&quot;hl&quot;&gt;${this.value}&lt;/span&gt;` ); return ` &lt;li&gt; &lt;span class=&quot;name&quot;&gt;${cityName}, ${stateName}&lt;/span&gt; &lt;span class=&quot;population&quot;&gt;${place.population}&lt;/span&gt; &lt;/li&gt; `; }) .join(''); return (suggestions.innerHTML = html);}const searchInput = document.querySelector('.search');const suggestions = document.querySelector('.suggestions');searchInput.addEventListener('change', displayMatches);searchInput.addEventListener('keyup', displayMatches);","link":"/javascript/wesbos/06.%20Type%20Ahead/"},{"title":"[Node.js] 11047번 : 동전 0","text":"문제준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다. 동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오. 입력첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000) 둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수) 출력첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다. 풀이 과정 실수로 완전탐색 방식으로 풀어버릴 뻔 했다….처음 풀어보는 그리디 알고리즘 유형이었어서 여러 풀이법들을 참고했다. 그리디 알고리즘…? 그리디 알고리즘은 모든 경우의 수를 탐색하는 알고리즘이 아니다. 따라서 경우에 따라 내가 도출한 답이 최적의 답이 아닐 수도 있다. ( 하지만 빠를 수는 있음 ) 코드 로직 우선 N값과 K값을 선언해준다. 카운트를 세야 하기 때문에 count 변수 또한 선언해준다. 그리디 알고리즘이기 때문에, 작은 값에서 큰 값으로 탐색하는 것은 비효율적이다. 따라서, 배열의 가장 우측에서부터 차례대로 탐색하는 것이 빠른 해답을 찾기 위한 방법일 것이다. for문 또한 i가 감소하는 식으로 구성한다. 우측에서부터 진행되기 때문에 최소 조합을 구성하기 위해선 K/Arr[i]가 count에 담기면 된다. 그리고 K값은 해당 Arr[i]값으로 나눈 나머지, 즉 K%= Arr[i]가 되면 된다. 이렇게 반복문을 계속 돌리면 우측에서부터 탐색했을 경우의 최소 동전 집합의 개수를 구할 수 있다. 소스 코드123456789101112function coin(arr, NK) { // K와 N 선언 const N = NK[0]; let K = NK[1]; let count = 0; // 합이 K가 되는 동전 조합의 최소값 구하기 for (let i = N - 1; i &gt; 0; i--) { count += Math.floor(K / arr[i]); K %= arr[i]; } return count;}","link":"/algorithm/boj/11047/"},{"title":"[Node.js] 1931번 : 회의실 배정","text":"문제한 개의 회의실이 있는데 이를 사용하고자 하는 N개의 회의에 대하여 회의실 사용표를 만들려고 한다. 각 회의 I에 대해 시작시간과 끝나는 시간이 주어져 있고, 각 회의가 겹치지 않게 하면서 회의실을 사용할 수 있는 회의의 최대 개수를 찾아보자. 단, 회의는 한번 시작하면 중간에 중단될 수 없으며 한 회의가 끝나는 것과 동시에 다음 회의가 시작될 수 있다. 회의의 시작시간과 끝나는 시간이 같을 수도 있다. 이 경우에는 시작하자마자 끝나는 것으로 생각하면 된다. 입력첫째 줄에 회의의 수 N(1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N+1 줄까지 각 회의의 정보가 주어지는데 이것은 공백을 사이에 두고 회의의 시작시간과 끝나는 시간이 주어진다. 시작 시간과 끝나는 시간은 231-1보다 작거나 같은 자연수 또는 0이다. 출력첫째 줄에 최대 사용할 수 있는 회의의 최대 개수를 출력한다. 풀이 과정 최대한 회의실 사용 일정을 꽉꽉 채워 담아야 한다.따라서 이번에는 큰 수에서 내림차순으로 탐색하는 것이 아니라, 작은 수에서 오름차순으로 탐색해야 한다. 배열을 회의가 끝나는 시간이 가장 빠른 순으로 오름차순 정렬한다. 끝나는 시간 순으로 정렬을 했기 때문에, 시작 시간이 끝나는 시간보다 크거나 같으면 해당 미팅을 진행할 수 있다. 따라서, 미팅을 스케줄에 넣을 때 마다 endpoint가 방금 추가된 미팅의 끝나는 시간으로 설정되어야 한다. (아래 그림 참조) 반복문 활용 arr[i][0] === end라면 count를 더한다. 그리고 end값을 수정한다. 최종적으로 count를 return해준다. 소스코드12345678910111213141516function meetingRoom(arr, N) { // 보기에서는 끝나는 시간 순으로 이미 정렬되어 있었지만, 다른 인풋값이 들어올 경우를 대비해 정렬을 해줬다. arr.sort((a, b) =&gt; a[1] - b[1]); // 두 번째 시간부터 체크할 것이기 때문에 카운트는 1, end도 첫 째 미팅의 끝나는 시간으로 선언 let count = 1; let end = arr[0][1]; for (let i = 1; i &lt; arr.length; i++) { // 만약 현재 미팅의 시작시간이 전에 추가된 미팅의 끝나는 시간보다 크거나 같으면 추가할 수 있다. if (arr[i][0] &gt;= end) { // 카운팅을 하고, end값을 현재 미팅의 종료시간으로 갱신한다. count++; end = arr[i][1]; } } return count;}","link":"/algorithm/boj/1931/"},{"title":"[Node.js] 11399번 : ATM","text":"문제인하은행에는 ATM이 1대밖에 없다. 지금 이 ATM앞에 N명의 사람들이 줄을 서있다. 사람은 1번부터 N번까지 번호가 매겨져 있으며, i번 사람이 돈을 인출하는데 걸리는 시간은 Pi분이다. 사람들이 줄을 서는 순서에 따라서, 돈을 인출하는데 필요한 시간의 합이 달라지게 된다. 예를 들어, 총 5명이 있고, P1 = 3, P2 = 1, P3 = 4, P4 = 3, P5 = 2 인 경우를 생각해보자. [1, 2, 3, 4, 5] 순서로 줄을 선다면, 1번 사람은 3분만에 돈을 뽑을 수 있다. 2번 사람은 1번 사람이 돈을 뽑을 때 까지 기다려야 하기 때문에, 3+1 = 4분이 걸리게 된다. 3번 사람은 1번, 2번 사람이 돈을 뽑을 때까지 기다려야 하기 때문에, 총 3+1+4 = 8분이 필요하게 된다. 4번 사람은 3+1+4+3 = 11분, 5번 사람은 3+1+4+3+2 = 13분이 걸리게 된다. 이 경우에 각 사람이 돈을 인출하는데 필요한 시간의 합은 3+4+8+11+13 = 39분이 된다. 줄을 [2, 5, 1, 4, 3] 순서로 줄을 서면, 2번 사람은 1분만에, 5번 사람은 1+2 = 3분, 1번 사람은 1+2+3 = 6분, 4번 사람은 1+2+3+3 = 9분, 3번 사람은 1+2+3+3+4 = 13분이 걸리게 된다. 각 사람이 돈을 인출하는데 필요한 시간의 합은 1+3+6+9+13 = 32분이다. 이 방법보다 더 필요한 시간의 합을 최소로 만들 수는 없다. 줄을 서 있는 사람의 수 N과 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어졌을 때, 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 구하는 프로그램을 작성하시오. 입력첫째 줄에 사람의 수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄에는 각 사람이 돈을 인출하는데 걸리는 시간 Pi가 주어진다. (1 ≤ Pi ≤ 1,000) 출력첫째 줄에 각 사람이 돈을 인출하는데 필요한 시간의 합의 최솟값을 출력한다. 풀이 과정 최소한의 대기시간으로 사람들이 ATM업무를 처리할 수 있도록 하는 줄서기 배열을 구하고, 총 걸린 시간을 반환하면 된다. 앞 사람의 업무처리 시간이 길수록 뒷 사람들의 대기시간은 더 늘어난다. 따라서 업무처리 시간이 짧은 순서대로 사람들을 줄 세워야 한다. 업무처리 시간을 기준으로 오름차순 정렬하면 쉽게 풀 수 있는 문제다. tempSum : 자신을 제외한 이전까지의 합을 구하기 위한 변수 sum : 대기시간 + 업무처리 시간까지 모두 합한 해당 요소까지의 시간 소스코드123456789101112131415function ATM(n, arr) { // 우선 업무처리시간이 짧은 순으로 오름차순 정렬한다. arr.sort((a, b) =&gt; a - b); // 자신을 제외한 이전까지의 합을 담는 tempSum let tempSum = 0; // 자신을 포함한 모든 대기시간 + 업무처리시간의 합 let sum = 0; for (let i = 0; i &lt; n; i++) { // tempSum은 총 대기시간이 된다. (앞의 요소들의 업무처리 시간들의 합이기 떄문) // 또한 tempSum이 뒤에 연산되기 때문에 sum에 더해지는 tempSum은 이전까지의 대기시간 + 업무처리 시간이다 sum += tempSum + arr[i]; tempSum += arr[i]; } return sum;}","link":"/algorithm/boj/11399/"},{"title":"2.네트워크의 구성","text":"네트워크를 구성하는 기기 네트워크 연결을 위해서는 기기와 기기 간의 연결이 필요하다.이러한 연결을 돕는 데에 가장 주요한 세 개의 기기가 존재한다. 라우터 레이어2 스위치 레이어3 스위치 데이터 전송처리 절차 네트워크 기기는 물리적 신호를 전달 받아 디지털 신호(0,1)로 변환하여 다른 기기로 다시 전송해준다. 데이터 수신 ⇒ 물리적 신호로 변환된 데이터를 받아서 디지털 신호로 변환한다. 데이터를 보낼 곳 결정 ⇒ 데이터에는 부가적인 제어 정보도 함께 담겨서 온다. 이를 활용해 네트워크 기기는 데이터 전송 대상을 설정한다. 데이터 전송 ⇒ 다시 디지털 신호(0,1)을 물리적 신호로 변환하여 송신 대상에게 데이터를 전송한다. 네트워크의 구체적 구성 네트워크 연결을 위해 우리는 일반적으로 인터페이스(포트)를 통해 각 기기를 연결한다. 이더넷 포트 ? LAN 포트? ⇒ 모두 이더넷 인터페이스를 통칭하는 말이다. 이더넷 인터페이스란, 현재 가장 널리 통용되는 인터페이스다. 💡 우리는 이 인터페이스를 통해 물리적 신호와 디지털 신호 등이 전송될 수 있도록 현관문의 역할을 해준다. LAN을 구축하는 방법 LAN은 근거리 네트워크를 의미한다.그렇다면 기기와 기기를 연결해서 어떻게 인터넷 네트워크를 구현한다는 것일까? LAN에도 당연히 라우터, 레이어2 스위치와 같은 네트워크 기기가 필요하다. ⇒ 그리고 PC 또는 노트북에 네트워크 연결을 위한 인터페이스가 존재해야 한다. 사용자 PC의 인터페이스(포트)에 LAN선을 연결하고, 이 선을 또 네트워크 기기의 인터페이스에 연결해준다. 그러면 이제 네트워크 기기를 통해 데이터를 주고 받을 수 있다.","link":"/cs/network/%E1%84%82%E1%85%A6%E1%84%90%E1%85%B3%E1%84%8B%E1%85%AF%E1%84%8F%E1%85%B3%E1%84%8B%E1%85%B4%20%E1%84%80%E1%85%AE%E1%84%89%E1%85%A5%E1%86%BC/"},{"title":"1.네트워크의 기본","text":"네트워크란 무엇인가? 네트워크란, 한 마디로 “연결”을 의미한다.학교도 선생님과 학생들을 이어주는 네트워크, 회사도, 집도 모두 네트워크의 일환이다. 컴퓨터 네트워크 ⇒ 하지만 컴퓨터 네트워크는 “데이터를 주고 받기 위한 네트워크”를 의미한다. 카톡 메시지를 주고 받는 것, 인터넷에서 정보를 검색하거나 작성하는 것 모두 데이터의 전달 과정이 그 기반이 된다. 사설 네트워크 (인트라넷) 사설 네트워크는 사용자의 제한을 두는 제한적인 네트워크다. ⇒ 인트라넷, LAN 등이 이에 포함될 수 있다. 인터넷 누구나 접속이 가능한 네트워크다 ⇒ 해커, 옆집 강아지(?), 할아버지 할머니 등등 브라우저를 통해 누구든지 인터넷에 접속할 수 있다. LAN과 WAN LAN과 WAN은 사설 네트워크(인트라넷 등)에 사용되는 네트워크다. LAN (Local Area Network) ⇒ 가까운 범위 내의 기기들을 라우터 등을 통해 연결시키고, 기기 간의 데이터 통신 등이 가능하도록 네트워크를 구성한다. 즉, 가까운 거리에 있는 기계와 기계를 연결시킨다! WAN (Wide Area Network) ⇒ 위의 LAN을 다른 거점의 LAN과 연결시킬 수 있도록 연결해주는 역할을 한다.즉, LAN과 LAN의 연결을 돕는 징검다리라고 생각하면 편하다. 인터넷 그렇다면 근거리 기기간의 통신이 아닌, 각기 떨어져 있는 세상의 모든 사람들과 통신할 수 있는 방법은 뭘까? → 바로 인터넷이다. AS와 ISP AS : 자율 시스템(Autonomous System)⇒ 전세계의 다양한 조직들이 운영하는 네트워크조직 등을 구성하는 네트워크 생태계 ISP : Internet Service Provider⇒ 쉽게 설명하자면, 네트워크 서비스를 제공해주는 기업을 의미한다. 1티어 ISP로는 SKT, KT, LG U+ 등이 있다. 하위 티어의 영세 ISP도 많은데, 이들의 통신은 어쩔 수 없이 1티어 ISP를 경유할 수밖에 없다즉, 우리는 인터넷을 이용하고자 한다면… 1티어 ISP를 반드시 사용하게 된다. 서버와 클라이언트, 그리고 애플리케이션 인터넷을 통해 데이터를 주고받는다는 것은 알겠다.그렇다면 그 데이터가 도대체 어떻게 저장되고 어디에 저장되는 것인가? 서버와 클라이언트 클라이언트 서버 일반적인 우리들의 컴퓨터 굉장히 좋은 컴퓨터 주로 서버에 데이터를 “요청(Reuest)” 클라이언트로 부터 요청을 처리 (Response) ⇒ 클라이언트(우리)는 서버에 어떠한 특정 요청을 보내고 → 서버는 이러한 요청을 처리한 뒤 응답(Response)를 보내준다. 고객이 레스토랑에서 웨이터에게 주문을 하는 것과 같다고 보면 된다. 이러한 이유 때문에 서버의 컴퓨터 성능은 고성능이 요구된다. 애플리케이션 서버에서 데이터를 받아 처리하는 역할을 하는 것이 애플리케이션이다.클라이언트 사이드에서 반환된 데이터를 받아내는 것 또한 클라이언트의 애플리케이션이다. 네트워크 아키텍처와 프로토콜 그럼 어떤 방식으로 데이터를 주고 받을까?⇒ 네트워크를 통한 올바른 데이터 송수신을 위해선 규칙과 규약 등이 필요하다. 프로토콜 ⇒ 우리가 한국어를 사용할 때 막 사용하는 것이 아니듯이, 네트워크 또한 통신을 할 때 자기가 원하는 대로 규칙없이 대화를 하지는 않는다. 한국어에도 문법, 훈민정음, 발음, 상황에 따른 용법 등 다양한 규칙과 기준이 존재하듯, 네트워크 통신에도 이러한 다양한 규칙(프로토콜)들이 존재한다. 즉, 프로토콜은 네트워크 통신을 위한 규약이자 규칙들의 단편들이다. 네트워크 아키텍처 ⇒ 위의 프로토콜들이 종합된 것이 네트워크 아키텍처다.한국어, 영어와 같이 하나의 언어라고 생각하면 된다. TCP/IP 전세계적으로 영어가 공용어로 통하듯이, 대부분 통용되는 네트워크 아키텍처의 표준은 TCP/IP다. 이러한 네트워크 아키텍처를 효율적으로 운용하기 위해 아키텍처는 프로토콜들을 단순히 집약해놓은 것이 아니라, 계층화 하여 기능별로 구분해 둔다. TCP/IP의 계층 애플리케이션 계층 트랜스포트 계층 인터넷층 네트워크 인터페이스층 클라우드 네트워크 전통적인 방식은 회사 등이 자체적으로 서버를 구축하여 운용하고 관리하는 것이었다.하지만 시대가 변함에 따라, 인터넷만 통해서 가상의 (물리적으로 떨어져있는) 서버를 구축할 수 있게 되었고, 우리는 이를 클라우드 서비스라고 부른다. 클라우드 서비스의 종류 Iaas : 하드웨어만 사용 가능 Paas : 하드웨어와 OS, Middleware등의 시스템 플랫폼을 활용 가능하다. Saas : 하드웨어와 플랫폼 뿐만 아니라, 애플리케이션 기능까지 모두 사용 가능하다⇒ 대표적인 예로 AWS를 들 수 있다.","link":"/cs/network/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC%EC%9D%98%20%EA%B8%B0%EB%B3%B8/"}],"tags":[{"name":"개념","slug":"개념","link":"/tags/%EA%B0%9C%EB%85%90/"},{"name":"Wesbos Challenge","slug":"Wesbos-Challenge","link":"/tags/Wesbos-Challenge/"},{"name":"그리디 알고리즘","slug":"그리디-알고리즘","link":"/tags/%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"네트워크","slug":"네트워크","link":"/tags/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/"}],"categories":[{"name":"프론트엔드","slug":"프론트엔드","link":"/categories/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/"},{"name":"Javascript","slug":"프론트엔드/Javascript","link":"/categories/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C/Javascript/"},{"name":"알고리즘","slug":"알고리즘","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"},{"name":"CS","slug":"CS","link":"/categories/CS/"},{"name":"백준","slug":"알고리즘/백준","link":"/categories/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/%EB%B0%B1%EC%A4%80/"},{"name":"Network","slug":"CS/Network","link":"/categories/CS/Network/"}]}